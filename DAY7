/*
已知在一维数组A[m+n]中依次存放两个线性表(a1, a2, 3,. am)和(b1, b2, b....)
将数组中两个顺序表的位置互换
*/



#include<iostream>
#include<algorithm>
using namespace std;

void print(int a)
{
	cout << a << " ";
}


//暴力破解，不推荐！
/*
void SwapArr(int *A,int m,int n)//m是前一个顺序表的长度，n是后一个顺序表的长度
{
	int temp[100];
	for (int i = 0; i < m; ++i)
	{
		temp[i] = A[i];
	}
	for (int i = m; i<m+n; ++i)
	{
		A[i - m] = A[i];
	}
	for (int i = n; i < m + n; ++i)
	{
		A[i] = temp[i-n];
	}
}
*/



void Reverse(int *A, int start, int end)//start是数组从第几个开始，end是第几个结束
{
	for (int i = start ; i <= (start+end)/2; ++i)
	{
		swap(A[i],A[start+end-i]);
	}
}

void Exchange(int *A,int m,int n)
{
	Reverse(A, 0,m-1);		//逆置第一个顺序表
	Reverse(A, m, m+n-1);		//逆置第二个顺序表
	Reverse(A, 0, m+n-1);		//各部分都逆置完成，再逆置整个数组
}


int main()
{
	int A[] = { 1, 2, 3,/*这是分隔符，前面是一个顺序表，后面也是一个顺序表*/7, 8, 9 ,10};
	for_each(A, A + 7, print);
	cout << endl;
	Exchange(A, 3, 4);
	for_each(A, A + 7, print);
	cout << endl;


	/*for_each(A, A + 7, print);
	cout << endl;
	SwapArr(A,3,4);
	for_each(A, A + 7, print);
	cout << endl;*/
	int a;
	cin >> a;
	return 0;
}


